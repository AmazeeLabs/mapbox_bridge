<?php

/**
 * Implements hook_menu().
 */
function mapbox_bridge_menu() {

  $items['admin/config/user-interface/mapbox_bridge'] = array(
    'title' => 'Mapbox Bridge',
    'description' => 'Configure Mapbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mapbox_bridge_admin_settings'),
    'access arguments' => array('administer'),
    'file' => 'mapbox_bridge.admin.inc',
  );

  $items['mapbox_bridge_ajax_content'] = array (
    'page callback' => 'mapbox_bridge_ajax_content',
    'page arguments' => array(1, 2, 3),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Custom function to load content
 * */
function mapbox_bridge_ajax_content($entity_type, $viewmode, $entity_id) {
  $entity = entity_load_single($entity_type, $entity_id);
  if (entity_access('view', $entity_type, $entity)) {
    $rendered = entity_view($entity_type, array($entity), $viewmode);
    // Dont "return" it or otherwise it will display the whole page.
    // @todo: in case we will need some fancy js to be loaded on the viewmode
    // we have to refactor this to use the drupal ajax framework.
    print render($rendered);
    drupal_exit();
  }
  // If we are here, we have a 403 error. This is an ajax requst, so we will
  // just print a simple message and exit.
  print 'Access denied';
  drupal_exit();
}

/**
 *
 * Custom function to draw the map
 * */
function mapbox_bridge_render_map($map_id, $data = false, $type, $legend = false, $max_zoom = 12, $popup = false, $markerAnchor = 'center_center', $filter = array('enabled' => false), $cluster = false, $proximity = false, $center = FALSE, $marker_menu = FALSE, $menu_viewmode = FALSE) {
  if ($map_id && $type) {
    // add mapbox.js files
    drupal_add_js('https://api.tiles.mapbox.com/mapbox.js/v2.1.7/mapbox.js', 'external');
    drupal_add_css('https://api.tiles.mapbox.com/mapbox.js/v2.1.7/mapbox.css', 'external');

    // cluster files
    if ($cluster) {
      drupal_add_js('https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/leaflet.markercluster.js', 'external');
      drupal_add_css('https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/MarkerCluster.css', 'external');
      drupal_add_css('https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v0.4.0/MarkerCluster.Default.css', 'external');
    }

    // add chosen library
    if (module_exists('chosen')) {
      drupal_add_library('chosen', 'drupal.chosen');
    }

    // check the data
    if (!empty($data)) {
      $data = json_encode($data);
    } else {
      $data = FALSE;
    }

    global $_domain_variant;
    global $language;

    // @todo: We really reall have to make these variables as lightweight as
    // possible. They are injected directly into the html page.
    // add $map_id and token to javascript settings
    drupal_add_js(array('mapboxBridge' => array(
      'mapId' => $map_id,
      'data' => $data,
      'publicToken' => variable_get('mapbox_bridge_public', NULL),
      'legend' => $legend,
      'maxZoom' => $max_zoom,
      'popup' => $popup,
      'markerAnchor' => $markerAnchor,
      'filter' => $filter,
      'cluster' => $cluster,
      'proximity' => array('enabled' => $proximity, 'label' => t('Proximity search')),
      'center' => $center,
      'marker_menu' => array('enabled' => $marker_menu, 'viewmode' => $menu_viewmode),
      'path_settings' => array('domain_variant' => !empty($_domain_variant) ? $_domain_variant->prefix : FALSE, 'language' => !empty($language->prefix) ? $language->prefix : FALSE)
    )), 'setting');

    // add mapbox_bridge.behaviours.js which contains the main logic
    drupal_add_js(drupal_get_path('module', 'mapbox_bridge') . '/js/mapbox_bridge.content.js', array('group' => JS_LIBRARY, 'weight' => -1));
    drupal_add_js(drupal_get_path('module', 'mapbox_bridge') . '/js/mapbox_bridge.popup.js', array('group' => JS_LIBRARY, 'weight' => -1));
    drupal_add_js(drupal_get_path('module', 'mapbox_bridge') . '/js/mapbox_bridge.panControls.js', array('group' => JS_LIBRARY, 'weight' => -1));
    drupal_add_js(drupal_get_path('module', 'mapbox_bridge') . '/js/mapbox_bridge.filter.js', array('group' => JS_LIBRARY, 'weight' => -1));
    drupal_add_js(drupal_get_path('module', 'mapbox_bridge') . '/js/mapbox_bridge.behaviours.js', array('group' => JS_LIBRARY, 'weight' => -1));
    drupal_add_js(drupal_get_path('module', 'mapbox_bridge') . '/js/mapbox_bridge.marker_menu.js', array('group' => JS_LIBRARY, 'weight' => -1));

    // add mapbox_bridge.css for basic style overrides to mapbox
    drupal_add_css(drupal_get_path('module', 'mapbox_bridge') . '/css/mapbox_bridge.css', array('group' => CSS_DEFAULT));

    // div that will contain the map
    return '<div class="mapbox-bridge mapbox-type-' . $type . '" id="map" style="width: 100%;"></div>';
  }
}

/**
 * Implements hook_field_info().
 */

function mapbox_bridge_field_info() {
  return MapboxField::fieldInfo();
}

/**
 * Implements hook_field_widget_info().
 */
function mapbox_bridge_field_widget_info() {
  return MapboxField::widgetInfo();
}

/**
 * Process callback for the mapbox bridge field.
 */
function mapbox_bridge_field_process($element, $form_state, $complete_form) {
  return MapboxField::fieldProcess($element, $form_state, $complete_form);
}

/**
 * Implements hook_field_validate().
 */
function mapbox_bridge_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  MapboxField::fieldValidate($entity_type, $entity, $field, $instance, $langcode, $items, $errors);
}

/**
 * Implements hook_field_formatter_info().
 */
function mapbox_bridge_field_formatter_info() {
  return MapboxField::formatterInfo();
}

/**
 * Implements hook_field_formatter_view().
 */
function mapbox_bridge_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return MapboxField::formatterView($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Implements hook_field_is_empty().
 */
function mapbox_bridge_field_is_empty($item, $field) {
  return MapboxField::isEmpty($item, $field);
}

/**
 * Implements hook_field_widget_form().
 */
function mapbox_bridge_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return MapboxField::widgetForm($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
}

/**
 * Implements hook_element_info().
 */
function mapbox_bridge_element_info() {
  $elements = array();
  $elements['mapbox_bridge'] = array(
    '#input' => TRUE,
    '#process' => array('mapbox_bridge_field_process'),
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Returns an array with the available types of data sources for the map.
 *
 * @todo: maybe extend this to invoke a hook if needed in the future.
 */
function _mapbox_bridge_data_source_types() {
  return array(
    /*'view' => array(
      'title' => t('View'),
      'element_callback' => 'mapbox_bridge_data_source_element_view',
      'data_source_callback' => 'mapbox_bridge_data_source_object_view',
    ),
    'current_node' => array(
      'title' => t('Current node'),
      'element_callback' => 'mapbox_bridge_data_source_element_current_node',
      'data_source_callback' => 'mapbox_bridge_data_source_object_current_node',
    ),*/
    // @todo: at the moment, we handle here only full (or relative) URLs.
    'url' => array(
      'title' => t('URL'),
      'element_callback' => 'mapbox_bridge_data_source_element_url',
      'data_source_callback' => 'mapbox_bridge_data_source_object_url',
    ),
  );
}

/**
 * Returns the data source for a map, depending on the settings of an item.
 *
 * @param array $item
 *  An mapbox field item.
 *
 * @param string $entity_type
 *  The entity type of the entity which has the field.
 *
 * @param object $entity
 *  The entity object which holds the field.
 */
function mapbox_bridge_get_data_source($item, $entity_type, $entity) {
  $data_source_types = _mapbox_bridge_data_source_types();
  if (!empty($data_source_types[$item['data_source_type']]) && function_exists($data_source_types[$item['data_source_type']]['data_source_callback'])) {
    return $data_source_types[$item['data_source_type']]['data_source_callback']($item, $entity_type, $entity);
  }
  return NULL;
}

/**
 * Data source element callback for selecting a view.
 *
 * @param array $element
 *  The main form element.
 *  @see mapbox_bridge_field_process()
 */
function mapbox_bridge_data_source_element_view($element) {
  // The View data source element will show a list of views.
  // @todo: maybe as an improvement, we should show only views which return data
  // as json.
  $options = views_get_views_as_options(FALSE, 'enabled');
  $data_source_element = array(
    '#type' => 'select',
    '#title' => t('Select a view'),
    // @todo: should we put the default value in the main process function? mapbox_bridge_field_process()
    '#default_value' => !empty($element['#value']['data_source_id']) ? $element['#value']['data_source_id'] : '',
    '#description' => t('Select the view to be used as the source for the mapbox.'),
    '#options' => $options,
  );
  return $data_source_element;
}

/**
 * Returns the mapbox datasource for a view.
 * @see mapbox_bridge_get_data_source().
 */
function mapbox_bridge_data_source_object_view($item, $entity_type, $entity) {
  $words = explode(':', $item['data_source_id']);
  if (count($words == 2)) {
    $view = views_get_view($words[0]);
    $view->current_display = $words[1];
    // @todo: maybe for the future, handle also arguments.
    return $view;
  }
  return NULL;
}

/**
 * Data source element callback for selecting a geofield of the current node.
 *
 * @param $element
 *  The main form element.
 *  @see mapbox_bridge_field_process()
 */
function mapbox_bridge_data_source_element_current_node($element) {
  // The Current node data source element will show a list of geofields of the
  // node.
  $data_source_element = array(
    '#type' => 'select',
    '#title' => t('Select a geofield'),
    // @todo: should we put the default value in the main process function? mapbox_bridge_field_process()
    '#default_value' => !empty($element['#value']['data_source_id']) ? $element['#value']['data_source_id'] : '',
    '#description' => t('Select the geofield to be used as the source for the mapbox.'),
    '#options' => array('geo1' => 'Geo1', 'geo2' => 'Geo 2'),
  );
  return $data_source_element;
}

/**
 * Returns the mapbox datasource for a node (entity).
 * @see mapbox_bridge_get_data_source().
 */
function mapbox_bridge_data_source_object_current_node($item, $entity_type, $entity) {
  // @todo: probably we will need some changes here.
  return $entity;
}

/**
 * Data source element callback for entering a simple URL to a json file.
 *
 * @param $element
 *  The main form element.
 *  @see mapbox_bridge_field_process()
 */
function mapbox_bridge_data_source_element_url($element) {
  // The URL data source element will just let the user input an URL in a
  // textfield.
  // @todo: maybe add some validation?
  $data_source_element = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    // @todo: should we put the default value in the main process function? mapbox_bridge_field_process()
    '#default_value' => !empty($element['#value']['data_source_id']) ? $element['#value']['data_source_id'] : '',
    '#description' => t('Input the URL to a JSON file.'),
  );
  return $data_source_element;
}

/**
 * Returns the mapbox datasource for a url.
 * @see mapbox_bridge_get_data_source().
 */
function mapbox_bridge_data_source_object_url($item, $entity_type, $entity) {
  // We just return the data source id, it represents the URL. We run it through
  // the url() function so that we allow external and internal paths.
  return url($item['data_source_id']);
}

/**
 * Returns the possible options for the marker icon.
 */
function mapbox_bridge_marker_anchor_options() {
  return array(
    'center_center' => t('Center'),
    'bottom_center' => t('Bottom center'),
    'bottom_left' => t('Bottom left'),
    'bottom_right' => t('Bottom right'),
    'top_left' => t('Top left'),
    'top_right' => t('Top right'),
    'top_center' => t('Top center'),
  );
}

/**
 * Ajax callback for when the data source type is changed.
 */
function mapbox_bridge_data_source_type_ajax_callback($form, $form_state) {
  // The target element is one element below the triggering element.
  $array_parents = $form_state['triggering_element']['#array_parents'];
  array_pop($array_parents);

  // Iterate over the form parents to find the element.
  $element = $form;
  foreach ($array_parents as $name) {
    $element = &$element[$name];
  }
  return $element['data_source_id'];
}
